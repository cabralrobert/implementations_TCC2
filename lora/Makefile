# This file was automagically generated by mbed.org. For more information, 
# see http://mbed.org/handbook/Exporting-to-GCC-ARM-Embedded

GCC_BIN = 
PROJECT = lora_kl25z

BUILD_TARGET=TARGET_$(TARGET)
BUILD_DIR:=obj

FLOAT_ABI = softfp

TARGET_SYMBOLS = -DTARGET_FF_ARDUINO -DTOOLCHAIN_GCC_ARM -DTARGET_KLXX -DTARGET_KL25Z -DTARGET_CORTEX_M -DTARGET_LIKE_MBED \
 -DTARGET_M0P -DTARGET_Freescale -D__MBED__=1 -D__CORTEX_M0PLUS -DTOOLCHAIN_GCC -DTARGET_LIKE_CORTEX_M0 -DARM_MATH_CM0PLUS 

TARGET_CPUFLAGS = -mcpu=cortex-m0plus -mthumb

TARGET_INCL = -I./mbed-src/targets/cmsis/TARGET_Freescale -I./mbed-src/targets/cmsis/TARGET_Freescale/TARGET_KLXX -I./mbed-src/targets/cmsis/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z -I./mbed-src/targets/cmsis/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/TOOLCHAIN_GCC_ARM -I./mbed-src/targets/hal -I./mbed-src/targets/hal/TARGET_Freescale -I./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX -I./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z

TARGET_SRCS = \
 ./mbed-src/targets/cmsis/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/startup_MKL25Z4.S \
 ./mbed-src/targets/cmsis/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/cmsis_nvic.c \
 ./mbed-src/targets/cmsis/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/system_MKL25Z4.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/analogin_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/analogout_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/gpio_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/i2c_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/pinmap.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/port_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/pwmout_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/rtc_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/sleep.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/us_ticker.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/PeripheralPins.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/gpio_irq_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/mbed_overrides.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/serial_api.c \
 ./mbed-src/targets/hal/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/spi_api.c \

LINKER_SCRIPT = ./mbed-src/targets/cmsis/TARGET_Freescale/TARGET_KLXX/TARGET_KL25Z/TOOLCHAIN_GCC_ARM/MKL25Z4.ld

LD_FLAGS = $(CPU) -Wl,--gc-sections --specs=nano.specs -Wl,--wrap,main -Wl,-Map=$(PROJECT).map,--cref

MBED_SRCS = \
 ./mbed-src/common/assert.c \
 ./mbed-src/common/board.c \
 ./mbed-src/common/error.c \
 ./mbed-src/common/gpio.c \
 ./mbed-src/common/lp_ticker_api.c \
 ./mbed-src/common/mbed_interface.c \
 ./mbed-src/common/pinmap_common.c \
 ./mbed-src/common/rtc_time.c \
 ./mbed-src/common/semihost_api.c \
 ./mbed-src/common/ticker_api.c \
 ./mbed-src/common/us_ticker_api.c \
 ./mbed-src/common/wait_api.c \
 ./mbed-src/common/BusIn.cpp \
 ./mbed-src/common/BusInOut.cpp \
 ./mbed-src/common/BusOut.cpp \
 ./mbed-src/common/CAN.cpp \
 ./mbed-src/common/CallChain.cpp \
 ./mbed-src/common/Ethernet.cpp \
 ./mbed-src/common/FileBase.cpp \
 ./mbed-src/common/FileLike.cpp \
 ./mbed-src/common/FilePath.cpp \
 ./mbed-src/common/FileSystemLike.cpp \
 ./mbed-src/common/I2C.cpp \
 ./mbed-src/common/I2CSlave.cpp \
 ./mbed-src/common/InterruptIn.cpp \
 ./mbed-src/common/InterruptManager.cpp \
 ./mbed-src/common/LocalFileSystem.cpp \
 ./mbed-src/common/RawSerial.cpp \
 ./mbed-src/common/SPI.cpp \
 ./mbed-src/common/SPISlave.cpp \
 ./mbed-src/common/Serial.cpp \
 ./mbed-src/common/SerialBase.cpp \
 ./mbed-src/common/Stream.cpp \
 ./mbed-src/common/Ticker.cpp \
 ./mbed-src/common/Timeout.cpp \
 ./mbed-src/common/Timer.cpp \
 ./mbed-src/common/TimerEvent.cpp \
 ./mbed-src/common/retarget.cpp

LMIC_SRCS = \
 ./src/hal/hal.cpp \
 ./src/lmic/radio.cpp \
 ./src/lmic/oslmic.cpp \
 ./src/lmic/aes.cpp \
 ./src/lmic/lmic.cpp \

SRCS = $(MBED_SRCS) $(TARGET_SRCS) $(LMIC_SRCS) ./src/main.cpp

# Change project C &; C++ files into object files
# http://kevincuzner.com/2014/04/28/teensy-3-1-bare-metal/
#OBJECTS := $(addprefix $(BUILD_DIR)/,$($($(SRCS:.s=.o):.c=.o):.c=.o))
# $(addprefix $(OBJDIR)/,$(notdir $(C_FILES:.c=.c)))
#http://stackoverflow.com/questions/12069457/makefile-change-file-list-extension
S_OBJECTS := $(SRCS:.S=.o)
C_OBJECTS := $(S_OBJECTS:.c=.o)
CPP_OBJECTS := $(addprefix $(BUILD_DIR)/,$(C_OBJECTS:.cpp=.o))

OBJECTS = $(CPP_OBJECTS)

SYS_OBJECTS = 

MBED_INCL = -I./mbed-src  -I./mbed-src/common -I./mbed-src/api -I./mbed-src/hal -I./mbed-src/targets -I./mbed-src/targets/cmsis -I./mbed-src/targets/hal

LMIC_INCL = -I./src -I./src/hal -I./src/lmic 

INCLUDE_PATHS = -I. $(MBED_INCL) $(TARGET_INCL) $(LMIC_INCL)


LIBRARY_PATHS = 
LIBRARIES = 

############################################################################### 
AS      = $(GCC_BIN)arm-none-eabi-as
CC      = $(GCC_BIN)arm-none-eabi-gcc
CPP     = $(GCC_BIN)arm-none-eabi-g++
LD      = $(GCC_BIN)arm-none-eabi-gcc
OBJCOPY = $(GCC_BIN)arm-none-eabi-objcopy
OBJDUMP = $(GCC_BIN)arm-none-eabi-objdump
SIZE    = $(GCC_BIN)arm-none-eabi-size 

#ifeq ($(HARDFP),1)
#	FLOAT_ABI = hard
#else
#	FLOAT_ABI = softfp
#endif


CPU = $(TARGET_CPUFLAGS)
CC_FLAGS = $(CPU) -c -g -fno-common -fmessage-length=0 -w -Wall -Wextra -fno-exceptions -ffunction-sections -fdata-sections -fomit-frame-pointer -MMD -MP -D $(BUILD_TARGET) -Iinc/

CC_SYMBOLS = $(TARGET_SYMBOLS)

LD_SYS_LIBS = -lstdc++ -lsupc++ -lm -lc -lgcc -lnosys


.PHONY: all clean lst size

all: folder $(PROJECT).bin # $(PROJECT).hex size

folder:
	@mkdir -p bin obj

clean_all:
	@echo 'Project $(PROJECT) clean all...'
	@rm -f $(PROJECT).bin $(PROJECT).elf $(PROJECT).hex $(PROJECT).map $(PROJECT).lst $(OBJECTS) $(DEPS)
	@echo '  CLEAN    $(PROJECT).bin'
	@echo '  CLEAN    $(PROJECT).elf'
	@echo '  CLEAN    $(PROJECT).hex'
	@echo '  CLEAN    $(PROJECT).map'
	@echo '  CLEAN    $(PROJECT).lst'
	@for tes in $(OBJECTS) ; do \
		echo '  CLEAN    '$$tes ; \
		done

clean:
	@echo 'Project $(PROJECT) clean...'
	@rm -f $(PROJECT).bin $(PROJECT).elf $(PROJECT).hex $(PROJECT).map $(PROJECT).lst #$(OBJECTS) $(DEPS)
	@echo '  CLEAN    $(PROJECT).bin'
	@echo '  CLEAN    $(PROJECT).elf'
	@echo '  CLEAN    $(PROJECT).hex'
	@echo '  CLEAN    $(PROJECT).map'
	@echo '  CLEAN    $(PROJECT).lst'
	@rm -f obj/main.*
	@rm -rf bin

#.s.o:
$(BUILD_DIR)/%.o : %.S
	@mkdir -p $(@D) 
	@$(AS) $(CPU) -o $@ $<

#.c.o:
$(BUILD_DIR)/%.o : %.c
	@mkdir -p $(@D) #create output dir if it doesn't exist 
	@$(CC)  $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu99   $(INCLUDE_PATHS) -o $@ $<
	@echo '    CC     $<'

#.cpp.o:
$(BUILD_DIR)/%.o : %.cpp
	@mkdir -p $(@D) 
	@$(CPP) $(CC_FLAGS) $(CC_SYMBOLS) -std=gnu++98 -fno-rtti $(INCLUDE_PATHS) -o $@ $<
	@echo '    CC     $<'

$(PROJECT).elf: $(OBJECTS) $(SYS_OBJECTS)
#	$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ $(LIBRARIES) $(LD_SYS_LIBS) $(LIBRARIES) $(LD_SYS_LIBS)
	@for tes in $(OBJECTS) ; do \
		echo '    LD     '$$tes ; \
		done
	@$(LD) $(LD_FLAGS) -T$(LINKER_SCRIPT) $(LIBRARY_PATHS) -o $@ $^ -Wl,--start-group $(LIBRARIES) $(LD_SYS_LIBS) -Wl,--end-group
	

$(PROJECT).bin: $(PROJECT).elf
	@$(OBJCOPY) -O binary $< bin/$@
	@echo '  OBJCOPY  $<'
	@rm *.elf *.map

$(PROJECT).hex: $(PROJECT).elf
	@echo '  OBJCOPY  $<'
	@$(OBJCOPY) -O ihex $< bin/$@

$(PROJECT).lst: $(PROJECT).elf
	@$(OBJDUMP) -Sdh $< > bin/$@
	@echo '  OBJDUMP  $<'

lst: $(PROJECT).lst

size:
	@$(SIZE) $(PROJECT).elf

DEPS = $(OBJECTS:.o=.d) #$(SYS_OBJECTS:.o=.d)
	-include $(DEPS)

rmolds:
	find . -name "*~" | xargs rm -f


